"""Command line interface for AlphaPickle."""
from __future__ import annotations
import argparse
from typing import Sequence

from alphapickle import AlphaPickleRunner


#
# ### AlphaPickle ###
# ### Version 1.6.0 ###
# ### Author: Matt Arnold ###
# AlphaPickle extracts results metadata from pickle (.pkl) files created by DeepMind's
# AlphaFold (Jumper et al., 2021, doi: 10.1038/s41586-021-03819-2)
# For detailed usage and installation instructions, please consult README.alphapickle
# New in this version: refactored CLI using :class:`AlphaPickleRunner`.
#
# Copyright (C) 2021  Matt Arnold
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

BANNER = """
    _       _             ____ ___ ____ _  ___     _____
   __ _| |_ __ | |__   __ _  |  _ \_ _/ ___| |/ / |   | ____|
  / _` | | '_ \| '_ \ / _` | | |_) | | |   | ' /| |   |  _|
 | (_| | | |_) | | | | (_| | |  __/| | |___| . \| |___| |___
  \__,_|_| .__/|_| |_|\__,_| |_|  |___\____|_|\_\_____|_____|
         |_|
"""


def main(argv: Sequence[str] | None = None) -> None:
    parser = argparse.ArgumentParser(
        description=(
            "AlphaPickle\n"
            "Version 1.6.0\n"
            "Input an AlphaFold result_model_x.pkl metadata file, or a PDB file generated by AlphaFold (for pLDDT plotting), or\n"
            "a PAE JSON file of the type generated by the DeepMind Colab notebook (for PAE plotting) \n"
            "or a directory containing all output models and a ranking_debug.json file and generate \n"
            "a PAE plot (if pTM models were used), a pLDDT plot and a ChimeraX attribute file \n"
            "containing pLDDT data. Both of these metrics are also exported to \n"
            "csv files. All outputs save to the directory containing the input files.\n"
            "Copyright (C) 2021  Matt Arnold"
        )
    )
    parser.add_argument(
        "-od",
        "--output_directory",
        help="Path to AlphaFold output directory",
        default=None,
    )
    parser.add_argument(
        "-pf", "--pickle_file", help="Filename of metadata file for processing.", default=None
    )
    parser.add_argument(
        "-ff",
        "--fasta_file",
        help="Optional. Filename of fasta sequence file used for AlphaFold prediction.",
        default=None,
    )
    parser.add_argument(
        "-pdb",
        "--pdb_file",
        help=(
            "Optional. Provide the absolute file path of an AlphaFold PDB file (v2.0.1 or later) to "
            "produce a pLDDT plot from the b-factor column"
        ),
        default=None,
    )
    parser.add_argument(
        "-json",
        "--pae_json_file",
        help=(
            "Optional. Provide a json file containing PAE values, of the type produced by the "
            "DeepMind AlphaFold colab notebook"
        ),
        default=None,
    )
    parser.add_argument(
        "-ps",
        "--plot_size",
        help=(
            "Optional (Default = 12). Change size (in inches) of plots. This may be useful for very "
            "short or long input sequences"
        ),
        default=12,
        type=float,
    )
    parser.add_argument(
        "-pi",
        "--plot_increment",
        help=(
            "Optional (Default = 100). Change the increment of plot axis labels using residue numbering. "
            "This may be useful for very short or long input sequences"
        ),
        default=100,
        type=int,
    )
    args = parser.parse_args(argv)

    print(BANNER)

    runner = AlphaPickleRunner(
        fasta_file=args.fasta_file,
        plot_size=args.plot_size,
        axis_label_increment=args.plot_increment,
    )

    if args.pickle_file and not args.output_directory and not args.pdb_file and not args.pae_json_file:
        runner.process_pickle(args.pickle_file)
    elif args.output_directory and not args.pickle_file and not args.pdb_file and not args.pae_json_file:
        runner.process_directory(args.output_directory)
    elif args.pdb_file and not args.pickle_file and not args.output_directory and not args.pae_json_file:
        runner.process_pdb(args.pdb_file)
    elif args.pae_json_file and not args.pickle_file and not args.output_directory and not args.pdb_file:
        runner.process_pae_json(args.pae_json_file)
    else:
        parser.error(
            "Provide exactly one of pickle_file, output_directory, pdb_file, or pae_json_file"
        )

    print("Processing complete!")
    print("Data saved to output directory")
    print(
        "If you use AlphaPickle in your work (during analysis, or for plots that end up in publications), "
        "please cite AlphaPickle as follows: Arnold, M. J. (2021) AlphaPickle doi.org/10.5281/zenodo.5708709"
    )


if __name__ == "__main__":
    main()
